The ``100-matrix_mul`` module
=========================

Using ``matrix_mul``
---------------------

This is a text file to test the 100-matrix_mul module.  First import
``matrix_mul`` from the ``100-matrix_mul`` module:

>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Now Use with:

Valid Matrix Arguments:
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

m_a is not a list, m_b is a list
>>> matrix_mul(1, [[3, 4], [5, 6]])
Traceback (most recent call last):
TypeError: m_a must be a list

m_a is a list m_b is not a list
>>> matrix_mul([[1, 2], [3, 4]], 1)
Traceback (most recent call last):
TypeError: m_b must be a list

m_a is not a list of lists
>>> print(matrix_mul([1, 2], [[1, 2], [3, 4]]))
Traceback (most recent call last):
TypeError: m_a must be a list of lists

m_b is not a list of lists
>>> matrix_mul([[1, 2], [3, 4]], [3, 4])
Traceback (most recent call last):
TypeError: m_b must be a list of lists

m_a list of lists containing not integer and float values
>>> matrix_mul([[1, "s"], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
TypeError: m_a should contain only integers or floats

m_b a list of lists containing not integer and float values
>>> matrix_mul([[1, 2], [3, 4]], [[1, "2"], [3, 4]])
Traceback (most recent call last):
TypeError: m_b should contain only integers or floats

m_a does nto have matching rows lenght
>>> matrix_mul([[1], [3, 4]], [[1, 2], [3, 4]])
Traceback (most recent call last):
TypeError: each row of m_a must be of the same size

m_b does not have matching rows lenght
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3]])
Traceback (most recent call last):
TypeError: each row of m_b must be of the same size
